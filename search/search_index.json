{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#appier-report","title":"appier-report","text":"<p>Report APIs wrapper</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Something</li> <li>Something else</li> </ul>"},{"location":"api/","title":"Modules","text":""},{"location":"api/#appier_report.cost_api.Report","title":"<code>Report</code>","text":"<p>This class is used to interact with the Appier Campaign Report API.</p> Source code in <code>appier_report/cost_api.py</code> <pre><code>class Report:\n\"\"\"\n    This class is used to interact with the Appier Campaign Report API.\n    \"\"\"\n\n    ENDPOINTS = {\n        \"campaign\": \"https://mmp.appier.org/campaign_report\",\n        \"inventory\": \"https://mmp.appier.org/inventory_report\",\n    }\n\n    def __init__(self, api_type: str = \"campaign\", access_token: str = \"\"):\n\"\"\"\n        Args:\n            api_type: \"campaign\" or \"inventory\"\n            access_token: The access token for the Appier API.\n        Returns:\n            Nothing\n\n        Doc Author:\n            minhpc@ikameglobal.com\n        \"\"\"\n        self.access_token = access_token\n        self.endpoint = Report.ENDPOINTS.get(api_type, None)\n\n        if not self.endpoint:\n            raise Exception(f\"Invalid type: {api_type}\")\n\n    def _get_report(\n        self,\n        start_date: str = None,\n        end_date: str = None,\n        timezone: int = 0,\n        max_retries: int = 3,\n        **kwargs,\n    ) -&gt; list[dict]:\n\"\"\"\n        Get campaign report data from Appier Cost API.\n\n        Args:\n            start_date: Format YYYY-MM-DD\n            end_date: Format YYYY-MM-DD\n            timezone: Timezone offset in hours.\n            max_retries: Number of retries before giving up.\n            retry_interval: Time to wait between retries.\n            **kwargs: Other parameters\n\n        Note:\n            The **start_date** and **end_date** should be near each other (about 5 days apart),\n            otherwise the request will fail.\n\n        Returns:\n            Report data in JSON format.\n        Doc Author:\n            minhpc@ikameglobal.com\n        \"\"\"\n        params = {\n            \"access_token\": self.access_token,\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"timezone\": timezone,\n            **kwargs,\n        }\n        adapter = HTTPAdapter(max_retries=max_retries)\n        with requests.Session() as session:\n            session.mount(self.endpoint, adapter)\n            response = session.get(url=self.endpoint, params=params)\n            if response.status_code == 200:\n                return response.json()\n            else:\n                raise Exception(f\"Error: {response.status_code}\")\n\n    def get_report(\n        self,\n        start_date: str = None,\n        end_date: str = None,\n        date_interval: int = 5,\n        timezone: int = 0,\n        max_retries: int = 3,\n        **kwargs,\n    ) -&gt; list[dict]:\n\"\"\"\n        Wrapper for _get_report() to get report data from Appier Cost API.\n\n        Args:\n            start_date: Format YYYY-MM-DD\n            end_date: Format YYYY-MM-DD\n            date_interval: Number of days between each request.\n            timezone: Timezone offset in hours.\n            max_retries: Number of retries before giving up.\n            **kwargs: Other parameters\n\n        Returns:\n            Report data in JSON format.\n        Doc Author:\n            minhpc@ikameglobal.com\n        \"\"\"\n        if not start_date or not end_date:\n            start_date = (datetime.now() - timedelta(days=2)).strftime(\"%Y-%m-%d\")\n            end_date = (datetime.now() - timedelta(days=1)).strftime(\"%Y-%m-%d\")\n\n        date_ranges = DateUtils.get_date_ranges(start_date=start_date, end_date=end_date, date_interval=date_interval)\n\n        result = []\n        for start, end in date_ranges:\n            result.extend(\n                self._get_report(\n                    start_date=start,\n                    end_date=end,\n                    timezone=timezone,\n                    max_retries=max_retries,\n                    **kwargs,\n                )\n            )\n\n        return result\n</code></pre>"},{"location":"api/#appier_report.cost_api.Report.__init__","title":"<code>__init__(api_type='campaign', access_token='')</code>","text":"<p>Parameters:</p> Name Type Description Default <code>api_type</code> <code>str</code> <p>\"campaign\" or \"inventory\"</p> <code>'campaign'</code> <code>access_token</code> <code>str</code> <p>The access token for the Appier API.</p> <code>''</code> <p>Returns:</p> Type Description <p>Nothing</p> Doc Author <p>minhpc@ikameglobal.com</p> Source code in <code>appier_report/cost_api.py</code> <pre><code>def __init__(self, api_type: str = \"campaign\", access_token: str = \"\"):\n\"\"\"\n    Args:\n        api_type: \"campaign\" or \"inventory\"\n        access_token: The access token for the Appier API.\n    Returns:\n        Nothing\n\n    Doc Author:\n        minhpc@ikameglobal.com\n    \"\"\"\n    self.access_token = access_token\n    self.endpoint = Report.ENDPOINTS.get(api_type, None)\n\n    if not self.endpoint:\n        raise Exception(f\"Invalid type: {api_type}\")\n</code></pre>"},{"location":"api/#appier_report.cost_api.Report.get_report","title":"<code>get_report(start_date=None, end_date=None, date_interval=5, timezone=0, max_retries=3, **kwargs)</code>","text":"<p>Wrapper for _get_report() to get report data from Appier Cost API.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>str</code> <p>Format YYYY-MM-DD</p> <code>None</code> <code>end_date</code> <code>str</code> <p>Format YYYY-MM-DD</p> <code>None</code> <code>date_interval</code> <code>int</code> <p>Number of days between each request.</p> <code>5</code> <code>timezone</code> <code>int</code> <p>Timezone offset in hours.</p> <code>0</code> <code>max_retries</code> <code>int</code> <p>Number of retries before giving up.</p> <code>3</code> <code>**kwargs</code> <p>Other parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[dict]</code> <p>Report data in JSON format.</p> Doc Author <p>minhpc@ikameglobal.com</p> Source code in <code>appier_report/cost_api.py</code> <pre><code>def get_report(\n    self,\n    start_date: str = None,\n    end_date: str = None,\n    date_interval: int = 5,\n    timezone: int = 0,\n    max_retries: int = 3,\n    **kwargs,\n) -&gt; list[dict]:\n\"\"\"\n    Wrapper for _get_report() to get report data from Appier Cost API.\n\n    Args:\n        start_date: Format YYYY-MM-DD\n        end_date: Format YYYY-MM-DD\n        date_interval: Number of days between each request.\n        timezone: Timezone offset in hours.\n        max_retries: Number of retries before giving up.\n        **kwargs: Other parameters\n\n    Returns:\n        Report data in JSON format.\n    Doc Author:\n        minhpc@ikameglobal.com\n    \"\"\"\n    if not start_date or not end_date:\n        start_date = (datetime.now() - timedelta(days=2)).strftime(\"%Y-%m-%d\")\n        end_date = (datetime.now() - timedelta(days=1)).strftime(\"%Y-%m-%d\")\n\n    date_ranges = DateUtils.get_date_ranges(start_date=start_date, end_date=end_date, date_interval=date_interval)\n\n    result = []\n    for start, end in date_ranges:\n        result.extend(\n            self._get_report(\n                start_date=start,\n                end_date=end,\n                timezone=timezone,\n                max_retries=max_retries,\n                **kwargs,\n            )\n        )\n\n    return result\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install appier-report, run this command in your terminal:</p> <pre><code>pip install appier-report\n</code></pre> <p>This is the preferred method to install appier-report, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-source","title":"From source","text":"<p>The source for appier-report can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>git clone git://github.com/ikamedawn/appier-report\n</code></pre> <p>Or download the tarball:</p> <pre><code>curl -OJL https://github.com/ikamedawn/appier-report/tarball/main\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>pip install .\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>For more information about the API, see the Appier Cost API.</p>"},{"location":"usage/#reporting-api","title":"Reporting API","text":""},{"location":"usage/#get-report","title":"Get report","text":"<pre><code>from appier_report import Report\n\nreport = Report(access_token=\"your_access_token\")\nresult = report.get_report(start_date='2023-05-27', end_date='2023-05-27')\nprint(result)\n</code></pre>"}]}